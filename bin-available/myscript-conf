#!/bin/bash
#####
#  __  __       ____            _       _
# |  \/  |_   _/ ___|  ___ _ __(_)_ __ | |_ ___  | Simple
# | |\/| | | | \___ \ / __| '__| | '_ \| __/ __| | Linux
# | |  | | |_| |___) | (__| |  | | |_) | |_\__ \ | Script
# |_|  |_|\__, |____/ \___|_|  |_| .__/ \__|___/ | Management
#         |___/                  |_|
# KawaiiPantsu - https://github.com/kawaiipantsu/myscripts
###############################################################
## MYSCRIPT - SCRIPT DEFAULTS :)
##################################################################
## %%MYSCRIPTS_DESCRIPTION=MyScripts Manager Config
## %%MYSCRIPTS_GROUP=MyScripts
export MYSCRIPT_PATH=$(dirname $(dirname "$(realpath -s "$0")"))
source ${MYSCRIPT_PATH}/etc/script-defaults
##################################################################

## BEGIN SCRIPT
## Text values
BACKTITLE=" MyScripts - Simpel Script Management "
TITLE="MyScripts checklist overview"
OPTION_LINE1=" Select the script(s) you want to activate on your system...\n"
OPTION_LINE2=" Dont forget to add the path"
OPTION_LINE3=" - ${MYSCRIPT_PATH}/bin"

## Help function
help_usage() { echo -e "Usage: $(basename $0) [OPTION...]\n\n   -s           Show individual scripts (default)\n   -g           Show script groups instead\n   -h           Show this help list\n" 1>&2; exit 0; }
help_syntax_error1() { echo -e "$(basename $0): invalid option -- '${1}'\nTry '$(basename $0) -h' for more information." 1>&2; exit 1; }
help_syntax_error2() { echo "Error: $0 (2)" 1>&2; exit 1; }

## Find out if we show Groupings or individual scripts
SHOW="SCRIPTS"
while getopts :gh flag
do
    case "${flag}" in
        s) SHOW="SCRIPTS";;
        g) SHOW="GROUPS";;
        h) help_usage;;
        \?) help_syntax_error1 "${OPTARG}";;
        :) help_syntax_error2;;
        *) SHOW="SCRIPTS";;
    esac
done
shift $((OPTIND -1))

if [[ "${SHOW}" == "GROUPS" ]] ; then
    OPTION_LINE1=" Select the group(s) you want to activate\n Selecting groups/ok resets all previous activated scripts"
fi

## Lets do magic!
let i=0 # define counting variable
let ii=0 # define counting variable
let Ungrouped_count=0
A=() # define working array
E=() # define working array
G=() # define working array
C=()
COL=$(stty size|awk '{print $1-5}')
ROW=$(stty size|awk '{print $2-6}')
LST=$((${COL}-11))
PAD=$((${ROW}-35))
for filename in ${MYSCRIPT_AVAILABLE}/*; do
    SCRIPT=$(basename "$filename")
    let i=$i+1
    SCRIPT_ENABLED="${MYSCRIPT_ENABLED}/${SCRIPT}"
    if [[ -f "${SCRIPT_ENABLED}" ]]; then
        CHECK="on"
        let ii=$ii+1
        if ! [[ "${SCRIPT}" =~ ^(myscript-conf|myscript-checkdeps|myscript-man)$ ]]; then
            E+=(\"${SCRIPT}\")
        fi
    else
        CHECK="off"
    fi
    # Get the DESCRIPTION text if there
    DESC=$(head -n 30 "$filename"|grep "%%MYSCRIPTS_DESCRIPTION"|awk -F'%%MYSCRIPTS_DESCRIPTION=' '{print $2}')
    _GROUPS=$(head -n 30 "$filename"|grep "%%MYSCRIPTS_GROUP"|awk -F'%%MYSCRIPTS_GROUP=' '{printf $2" "}')
    #myscript_print_info "Groups: ${_GROUPS}"
    if [[ ${_GROUPS} == "" ]] ; then
        #myscript_print_info "No group ..."
        G+=( Ungrouped )
        C+=( "${SCRIPT}%%\"Ungrouped\"")
        [ -z "${Ungrouped_count}" ] && let Ungrouped_count=0
        let Ungrouped_count=$Ungrouped_count+1    
    else
        for s in ${_GROUPS}; do
            #myscript_print_info "Found group: ${s}"
            G+=(${s})
            C+=( "${SCRIPT}%%\"${s}\"")
            gnc="${s}_count"
            [ -z ${gnc} ] && let ${gnc}=0
            let ${gnc}=${!gnc}+1
        done
    fi

    if [[ ${DESC} == "" ]] ; then
        DESC="No description added"
    fi

    #W+=("$(printf "%-${PAD}s" $(basename "${SCRIPT}"))" "${DESC}" "${CHECK}")
    if ! [[ "${SCRIPT}" =~ ^(myscript-conf|myscript-checkdeps|myscript-man)$ ]]; then
        W+=("${SCRIPT}" "$(printf "%-${PAD}s" " :: ${DESC}")" "${CHECK}")
    fi
done

# Small hack to sort array to only contain uniqes :)
TMP=" " read -r -a G <<< "$(echo "${G[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ')"
if [[ "${SHOW}" == "GROUPS" ]] ; then
    W=()
    E=()
    PAD=$((${ROW}-25))
    for s in "${G[@]}"; do
        gcount="${s}_count"
        if ! [[ "${s}" =~ ^(MyScripts)$ ]]; then
            W+=("${s}" "$(printf "%-${PAD}s" " :: There are ${!gcount} script(s) in this group")" "Off")
        fi
    done
fi

ACTIVATE=$(whiptail --backtitle "${BACKTITLE}" --title "${TITLE}" --checklist "\n${OPTION_LINE1}\n${OPTION_LINE2}\n${OPTION_LINE3}" ${COL} ${ROW} ${LST} "${W[@]}" 3>&2 2>&1 1>&3)
if [[ $? == 0 ]] ; then
    scripts=( ${ACTIVATE} )
    if [[ "${SHOW}" == "GROUPS" ]] ; then
        ## Sorry small hack, we always need to activate MyScripts !!
        ## So there will always be changes, even on no changes ...
        if [ ! "${ACTIVATE}" == "" ]; then
            scripts+=("\"MyScripts\"")
        fi
    fi
    A1=${E[@]}
    A2=${scripts[@]}
    if [ "${A1}" == "${A2}" ]; then
        # Noew also catching no changes needed ...
        myscript_print_info "No changes made, nothing to do"
        if [[ "${SHOW}" == "GROUPS" ]] ; then
            myscript_print_info "${#E[@]} groups(s) unchanged"
        else
            myscript_print_info "${#E[@]} script(s) unchanged"
        fi
    else
        if [[ "${SHOW}" == "GROUPS" ]] ; then
            myscript_print_info "${#E[@]} group(s) was active, removing"
            myscript_print_info "${#scripts[@]} groups(s) need activation"
        else
            myscript_print_info "${#E[@]} script(s) was active, removing"
            myscript_print_info "${#scripts[@]} script(s) need activation"
        fi
        
        for s in "${scripts[@]}"; do
            # ACTIVATE THINGS HERE !!
            # TRY TO CATCH PROBLEMS AND PRINT IT ....
            # FOR NOW JUST SIMULATE WHILE TESTING ALL GOOD ...
            if [[ "${SHOW}" == "GROUPS" ]] ; then
                myscript_print_info "Activating group ${s}"
                for ss in "${C[@]}"; do
                    if [[ "${ss}" == *"%%${s}" ]]; then
                        SCRIPT=$(echo -ne ${ss} | awk -F'%%' '{print $1}')
                        myscript_print_success " - ${SCRIPT}"
                    fi
                done
            else
                SCRIPT=${s}
                myscript_print_success "Activating script ${SCRIPT}"
            fi
        done
    fi
else
    myscript_print_warning "Aborted, no changes was made"
fi
myscript_print_info "All done"